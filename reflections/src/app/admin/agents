async def get_agent_summaries(conn):
    rows = await conn.fetch("""
        WITH last_ref AS (
          SELECT
            r.companion_id,
            MAX(r.created_at) AS last_seen,
            COUNT(*)          AS total_refs,
            COALESCE(SUM(r.gic_awarded), 0) AS total_gic
          FROM reflections r
          GROUP BY r.companion_id
        )
        SELECT
          c.id::text           AS companion_id,
          c.name               AS name,
          c.archetype          AS archetype,
          u.id::text           AS user_id,
          COALESCE(l.total_refs, 0) AS reflections,
          COALESCE(l.total_gic, 0)  AS gic,
          EXTRACT(EPOCH FROM (NOW() - COALESCE(l.last_seen, c.created_at)))::bigint AS since_last_seconds
        FROM companions c
        JOIN users u ON u.id = c.user_id
        LEFT JOIN last_ref l ON l.companion_id = c.id
        ORDER BY COALESCE(l.last_seen, c.created_at) DESC
        LIMIT 500;
    """)

@app.get("/admin/agents/stream")
async def admin_agents_stream(x_admin_token: Optional[str] = Header(None)):
    _require_admin(x_admin_token)

    async def gen():
        # Initial hello (so client knows weâ€™re alive)
        yield _sse({"ok": True, "ts": time.time()}, event="hello")

        while True:
            try:
                async with pool.acquire() as c:
                    items = await get_agent_summaries(c)  # your real query already added
                    metrics_row = await c.fetchrow("""
                      WITH agg AS (
                        SELECT
                          (SELECT COUNT(*) FROM users)        AS users,
                          (SELECT COUNT(*) FROM companions)   AS companions,
                          (SELECT COUNT(*) FROM reflections)  AS reflections,
                          (SELECT COALESCE(SUM(gic_awarded),0) FROM reflections) AS gic
                      )
                      SELECT * FROM agg;
                    """)
                payload = {
                    "ts": time.time(),
                    "agents": items,
                    "totals": {
                        "users": int(metrics_row["users"]),
                        "companions": int(metrics_row["companions"]),
                        "reflections": int(metrics_row["reflections"]),
                        "gic": int(metrics_row["gic"]),
                    },
                }
                yield _sse(payload, event="snapshot")
            except Exception as e:
                # send error frame, wait, keep loop alive
                yield _sse({"error": str(e), "ts": time.time()}, event="error")
            # Adjust refresh cadence here (e.g., 10s)
            await asyncio.sleep(10)

    out = []
    for r in rows:
        out.append({
           "companion_id": "uuid",
           "name": "Echo",
           "archetype": "sage",
           "user_id": "uuid",
           "reflections": 42,
           "gic": 580,
           "since_last": "12m 10s"
        })

```
    return out  
